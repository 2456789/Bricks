// buttons
@mixin btn-style($bg-color, $border-color, $active-bg-color, $active-border-color, $color) {
  color: $color;
  background-color: $bg-color;
  border-color: $border-color;

  // Give desktop users something to play with
  &:hover {
    color: $color;
    text-decoration: none;
  }
  &.active, &:active {
    background-color: $active-bg-color;
    box-shadow: inset 0px 1px 3px rgba(0,0,0,0.15);
    border-color: $active-border-color;
  }
}

@mixin btn-clear($color, $font-size:"") {
  &.btn-clear {
    color: $color;
    background: none;
    border-color: transparent;
    box-shadow: none;

    @if $font-size != "" {
      font-size: $font-size;
    }
  }
  &.btn-icon {
    background: none;
    border-color: transparent;
  }
}

@mixin btn-outline($color, $text-color:"") {
  &.btn-outline {
    background: transparent;
    border-color: $color;
    @if $text-color == "" {
      $text-color: $color;
    } 
    color: $text-color;
    &.active, &:active {
      background-color: $color;
      color: #fff;
      box-shadow: none;
    }
  }
}

// nav
@mixin em($property, $values...) {
  $max: length($values);
  $emValues: '';

  @for $i from 1 through $max {
    @if nth($values, $i) != 'important' {
      $value: strip-unit(nth($values, $i));
      $emValues: #{$emValues + $value}em;

      @if $i < $max {
        $emValues: #{$emValues + " "};
      }
    }

    @if $i == $max {
      @if nth($values, $i) == 'important' {
        $emValues: #{$emValues + " !important"};
      }
    }
  }

  #{$property}: $emValues;
}

// Range
@mixin range-style($track-bg-color) {
  &::-webkit-slider-thumb:before {
    background: $track-bg-color;
  }
}

// Clearfix
@mixin clearfix {
  *zoom: 1;
  &:before,
  &:after {
    display: table;
    content: "";
    line-height: 0;
  }
  &:after {
    clear: both;
  }
}

// Placeholder text
@mixin placeholder($color: $input-color-placeholder) {
  &:-moz-placeholder {
    color: $color;
  }
  &:-ms-input-placeholder {
    color: $color;
  }
  &::-webkit-input-placeholder {
    color: $color;
  }
}

// Text Mixins
@mixin text-size-adjust($value: none) {
  -webkit-text-size-adjust: $value; 
     -moz-text-size-adjust: $value;
          text-size-adjust: $value; 
}
@mixin tap-highlight-transparent() {
  -webkit-tap-highlight-color: rgba(0,0,0,0);
  -webkit-tap-highlight-color: transparent; // For some Androids
}
@mixin touch-callout($value: none) {
  -webkit-touch-callout: $value;
}

// Font Mixins
@mixin font-family-serif() {
  font-family: $serif-font-family;
}
@mixin font-family-sans-serif() {
  font-family: $sans-font-family;
}
@mixin font-family-monospace() {
  font-family: $mono-font-family;
}
@mixin font-shorthand($size: $base-font-size, $weight: normal, $line-height: $base-line-height) {
  font-size: $size;
  font-weight: $weight;
  line-height: $line-height;
}
@mixin font-serif($size: $base-font-size, $weight: normal, $line-height: $base-line-height) {
  @include font-family-serif();
  @include font-shorthand($size, $weight, $line-height);
}
@mixin font-sans-serif($size: $base-font-size, $weight: normal, $line-height: $base-line-height) {
  @include font-family-sans-serif();
  @include font-shorthand($size, $weight, $line-height);
}
@mixin font-monospace($size: $base-font-size, $weight: normal, $line-height: $base-line-height) {
  @include font-family-monospace();
  @include font-shorthand($size, $weight, $line-height);
}
@mixin font-smoothing($font-smoothing) { 
  -webkit-font-smoothing: $font-smoothing;
          font-smoothing: $font-smoothing;
}

// Appearance
@mixin appearance($val) {
  -webkit-appearance: $val;
  -moz-appearance: $val;
  appearance: $val;
}

// Border Radius Mixins
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
          border-radius: $radius;
}

// Single Corner Border Radius
@mixin border-top-left-radius($radius) {
  -webkit-border-top-left-radius: $radius;
      -moz-border-radius-topleft: $radius;
          border-top-left-radius: $radius;
}
@mixin border-top-right-radius($radius) {
  -webkit-border-top-right-radius: $radius;
      -moz-border-radius-topright: $radius;
          border-top-right-radius: $radius;
}
@mixin border-bottom-right-radius($radius) {
  -webkit-border-bottom-right-radius: $radius;
      -moz-border-radius-bottomright: $radius;
          border-bottom-right-radius: $radius;
}
@mixin border-bottom-left-radius($radius) {
  -webkit-border-bottom-left-radius: $radius;
      -moz-border-radius-bottomleft: $radius;
          border-bottom-left-radius: $radius;
}

// Single Side Border Radius
@mixin border-top-radius($radius) {
  @include border-top-right-radius($radius);
  @include border-top-left-radius($radius);
}
@mixin border-right-radius($radius) {
  @include border-top-right-radius($radius);
  @include border-bottom-right-radius($radius);
}
@mixin border-bottom-radius($radius) {
  @include border-bottom-right-radius($radius);
  @include border-bottom-left-radius($radius);
}
@mixin border-left-radius($radius) {
  @include border-top-left-radius($radius);
  @include border-bottom-left-radius($radius);
}


// Box shadows
@mixin box-shadow($shadow...) {
  -webkit-box-shadow: $shadow;
     -moz-box-shadow: $shadow;
          box-shadow: $shadow;
}

// Transition Mixins
@mixin transition($transition...) {
  -webkit-transition: $transition;
     -moz-transition: $transition;
          transition: $transition;
}
@mixin transition-delay($transition-delay) {
  -webkit-transition-delay: $transition-delay;
     -moz-transition-delay: $transition-delay;
          transition-delay: $transition-delay;
}
@mixin transition-duration($transition-duration) {
  -webkit-transition-duration: $transition-duration;
     -moz-transition-duration: $transition-duration;
          transition-duration: $transition-duration;
}
@mixin transition-timing-function($transition-timing) {
   -webkit-transition-timing-function: $transition-timing;
      -moz-transition-timing-function: $transition-timing;
           transition-timing-function: $transition-timing;
 }
 @mixin transition-property($property) {
  -webkit-transition-property: $property;
     -moz-transition-property: $property;
          transition-property: $property;
}
@mixin transition-transform($properties...) {
  // special case cuz of transform vendor prefixes
  -webkit-transition: -webkit-transform $properties;
     -moz-transition: -moz-transform $properties;
          transition: transform $properties;
}

// Animation Mixins
@mixin animation($animation) {
 -webkit-animation: $animation;
    -moz-animation: $animation;
         animation: $animation;
}
@mixin animation-duration($duration) {
 -webkit-animation-duration: $duration;
    -moz-animation-duration: $duration;
         animation-duration: $duration;
}
@mixin animation-timing-function($animation-timing) {
 -webkit-animation-timing-function: $animation-timing;
    -moz-animation-timing-function: $animation-timing;
         animation-timing-function: $animation-timing;
}
@mixin animation-fill-mode($fill-mode) {
 -webkit-animation-fill-mode: $fill-mode;
    -moz-animation-fill-mode: $fill-mode;
         animation-fill-mode: $fill-mode;
}
@mixin animation-name($name) {
 -webkit-animation-name: $name;
    -moz-animation-name: $name;
         animation-name: $name;
}
@mixin animation-iteration-count($count) {
 -webkit-animation-iteration-count: $count;
    -moz-animation-iteration-count: $count;
         animation-iteration-count: $count;
 }

// Transformation Mixins
@mixin rotate($degrees) {
  -webkit-transform: rotate($degrees);
     -moz-transform: rotate($degrees);
          transform: rotate($degrees);
}
@mixin scale($ratio) {
  -webkit-transform: scale($ratio);
     -moz-transform: scale($ratio);
          transform: scale($ratio);
}
@mixin translate($x, $y) {
  -webkit-transform: translate($x, $y);
     -moz-transform: translate($x, $y);
          transform: translate($x, $y);
}
@mixin skew($x, $y) {
  -webkit-transform: skew($x, $y);
     -moz-transform: skew($x, $y);
          transform: skew($x, $y);
  -webkit-backface-visibility: hidden;
}
@mixin translate3d($x, $y, $z) {
  -webkit-transform: translate3d($x, $y, $z);
     -moz-transform: translate3d($x, $y, $z);
          transform: translate3d($x, $y, $z);
}
@mixin translateZ($z) {
  -webkit-transform: translateZ($z);
     -moz-transform: translateZ($z);
          transform: translateZ($z);
}

@mixin transform-origin($left, $top) {
  -webkit-transform-origin: $left $top;
     -moz-transform-origin: $left $top;
          transform-origin: $left $top;
}

// Backface visibility
@mixin backface-visibility($visibility){
  -webkit-backface-visibility: $visibility;
          backface-visibility: $visibility;
}

// Background clipping
@mixin background-clip($clip) {
  -webkit-background-clip: $clip;
     -moz-background-clip: $clip;
          background-clip: $clip;
}

// Grid
@mixin respond($media) {
  @media #{$media} {
    @content;
  } 
} 

@mixin container($type) {
  @if $type == fluid {
    .container-fluid {
      @include clearfix;
        padding-right: 15px;
        padding-left: 15px;
        margin-right: auto;
        margin-left: auto;
    }
    } @else if $type == fixed {
      .container {
        @include clearfix;
        padding-right: 15px;
        padding-left: 15px;
        margin-right: auto;
        margin-left: auto;
      }
    }
}

@mixin row() {
  .row {
    margin-right: -15px;
    margin-left: -15px;
    &:after {
      content: "";
      display: table;
      clear: both;
    }
  }
}

@mixin col($t) {
  @for $i from 1 through $num-columns {
    .col-#{$t}-#{$i} {
      position: relative;
      min-height: 1px;
      padding-right: 15px;
      padding-left: 15px;
    }
  }
}

@mixin col-float($q) {
  @for $i from 1 through $num-columns {
    .col-#{$q}-#{$i} {
      float: left;
    }
  }
}

@mixin g-col($p) {
  @for $i from 1 through $num-columns {
    .col-#{$p}-#{$i} {
      width: ($width-fl * $i) / $num-columns;
    }
  }
}

@mixin g-p-col($p) {
  @for $i from 0 through $num-columns {
    .pull-#{$p}-#{$i} {
      right: ($width-fl * $i) / $num-columns;
    }
  }
}

@mixin g-pu-col($p) {
  @for $i from 0 through $num-columns {
    .push-#{$p}-#{$i} {
      left: ($width-fl * $i) / $num-columns;
    }
  }
}

@mixin g-o-col($p) {
  @for $i from 0 through $num-columns {
    .offset-#{$p}-#{$i} {
      margin-left: ($width-fl * $i) / $num-columns;
    }
  }
}

// Background sizing
@mixin background-size($size) {
  -webkit-background-size: $size;
     -moz-background-size: $size;
          background-size: $size;
}

// Box sizing
@mixin box-sizing($boxmodel) {
  -webkit-box-sizing: $boxmodel;
     -moz-box-sizing: $boxmodel;
          box-sizing: $boxmodel;
}

// User select
@mixin user-select($select) {
  -webkit-user-select: $select;
     -moz-user-select: $select;
      -ms-user-select: $select;
          user-select: $select;
}

// Content Columns
@mixin content-columns($columnCount, $columnGap: $grid-gutter-width) {
  -webkit-column-count: $columnCount;
     -moz-column-count: $columnCount;
          column-count: $columnCount;
  -webkit-column-gap: $columnGap;
     -moz-column-gap: $columnGap;
          column-gap: $columnGap;
}